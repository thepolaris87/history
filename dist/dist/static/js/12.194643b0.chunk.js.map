{"version":3,"sources":["webpack:///./src/modules/DM000005.js","webpack:///./src/utils/util.js","webpack:///./src/utils/D1Animate.js","webpack:///./src/components/D1drag.js"],"names":["DM000005","canvas","SOL","SVG","p","g","items","callback","position","testG","test","center","rows","columns","size","itemG","addClass","itemLength","length","remainNum","addItem","getRandomArrayElement","point","getPointInMatrixForm","startPoint","x","cx","y","cy","gap","width","height","shapes","shuffle","concat","map","el","i","type","url","imageIndex","imageG","image","img","scale","rect","attr","stroke","opacity","after","select","data","index","D1drag","dragItem","startCallback","dragStartCallback","moveCallback","dragMoveCallback","endCallback","dragEndCallback","self","append","forEach","pointerEvents","userIndex","dropIndex","getUserDropElementIndex","dropElement","swapItem","answerCheck","answer","answerAnimHandler","moveAnimate","bool","removeIndex","removeItem","downItem","emptyIndex","fillItem","Promise","all","D1Animate","blink","interval","duration","element","includes","remove","columnCheckArr","getTransposeArray","get2dimArray","totalIndex","remainIndex","animate","el2","removed","count","reduce","c","j","moveIndex","push","bind","window","mina","bounce","filter","getNextArrayElement","arr","nextEmptyIndex","next","value","sort","a","b","first","second","firstIndex","secondIndex","elements","animates","rowRemoveIndex","rowCheck","columRemoveIndex","columnCheck","totalRemoveIndex","getUniquArray","Boolean","removeTargetIndex","el3","currentType","some","sameNum","userDragItem","targetIndex","getBBox","shapeBBox","Snap","path","isPointInsideBBox","start","indexOf","n","newArray","q","Math","floor","r","tempArr","reverse","offset","getPointInScatterForm","area","pointNum","neighborhood","points","bbox","abs","repeat","getRandomNumber","boundingBox","x2","y2","bbox2","bbox1","console","error","wait","delay","resolve","setTimeout","slice","min","max","random","getRandomNumberArray","isUnique","randArr","uniqueArr","getSumArray","acc","num","getSimultaneousEquationConstant","x1","y1","convertToPathStr","line","circle","polygon","_rest","rest","Array","isArray","array","copyArray","k","makeArrayNumber","startNum","endNum","rangeNum","isSameArray","saveImage","svg","document","createElement","XMLSerializer","serializeToString","blob","Blob","Image","URL","createObjectURL","src","onload","getContext","drawImage","revokeObjectURL","uri","toDataURL","replace","log","href","download","click","calculateAnswer","sign","ans","drawPath","totalLength","getTotalLength","pathStr","val","subPath","getSubpath","d","undefined","moveTo","dx","dy","transform","onPath","local","easing","startPt","getPointAtLength","flip","front","matrix","sliding","hiddenTime","rolling","directionAngle","multiple","revolutions","linear","dxy","radius","w","radian","PI","cos","sin","diretion","translate","rotate","shake","fadeIn","from","to","opacityNum","Number","zoom","begin","end","draggingItem","originPoint","dragStart","dragMove","elemenet","origin","snapInvMatrix","diffMatrix","invert","dragEnd","setDragState","_randomDuration","randomDuration","spectrumEffect","_interval","setInterval","clone","clearInterval","reset","moveAnimateWithScale","move","_scale","hidden","drag"],"mappings":"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","file":"static/js/12.194643b0.chunk.js","sourcesContent":["import { image } from 'sol-common';\nimport Snap from 'sol-common/snap';\nimport { SOL } from 'sol-common/util';\nimport { get2dimArray, getPointInMatrixForm, getRandomArrayElement, getTransposeArray, getUniquArray, shuffle } from '../utils/util';\nimport D1drag from '../components/D1drag';\nimport D1Animate from '../utils/D1Animate';\n\nexport default function DM000005({ canvas = SOL.SVG, ...p }) {\n    const g = canvas;\n    const callback = p.callback;\n\n    const items = p.items;\n    const position = p.position;\n\n    const testG = g.g();\n\n    test({\n        g: testG,\n        items,\n        position\n    });\n}\n\nconst test = ({ g, items, position }) => {\n    const { center, rows, columns, size } = position;\n    const itemG = g.g().addClass('D1-item-group');\n    const itemLength = items.length;\n    const totalNum = rows * columns;\n    const remainNum = totalNum - itemLength;\n    const addItem = getRandomArrayElement(items, remainNum);\n    const point = getPointInMatrixForm({\n        startPoint: { x: center.cx, y: center.cy },\n        rows,\n        columns,\n        gap: { x: size.width, y: size.height },\n        center: true\n    });\n    const sameNum = 3;\n\n    const shapes = shuffle(items.concat(addItem)).map((el, i) => {\n        const { type, imageIndex: url } = el;\n        const { x, y } = point[i];\n        const imageG = image({ canvas: itemG, img: { url, scale: 0.7 }, x, y, center: true });\n\n        imageG\n            .rect(x - size.width / 2, y - size.height / 2, size.width, size.height)\n            .attr({ stroke: 'blue', opacity: '0' })\n            .after(imageG.select('use'));\n\n        imageG.data('data', { type, index: i });\n\n        return D1drag({\n            dragItem: imageG,\n            startCallback: () => dragStartCallback(imageG),\n            moveCallback: () => dragMoveCallback(imageG),\n            endCallback: () => dragEndCallback(imageG)\n        });\n    });\n\n    const dragStartCallback = self => {\n        itemG.append(self);\n    };\n\n    const dragMoveCallback = self => {\n        // const dropIndex = getUserDropElementIndex(self);\n    };\n\n    const dragEndCallback = async self => {\n        shapes.forEach(el => el.attr({ pointerEvents: 'none' }));\n        const userIndex = self.data('data').index;\n        const dropIndex = getUserDropElementIndex(self);\n\n        if (typeof dropIndex === 'number') {\n            const dropElement = shapes[dropIndex];\n\n            await swapItem(self, dropElement);\n            const { answer } = answerCheck();\n\n            if (answer) await answerAnimHandler();\n            else await swapItem(dropElement, self);\n        } else {\n            const { x, y } = point[userIndex];\n            await self.moveAnimate({ x: x - size.width / 2, y: y - size.height / 2 });\n        }\n\n        shapes.forEach(el => el.attr({ pointerEvents: 'auto' }));\n    };\n\n    const answerAnimHandler = async (bool = true) => {\n        while (bool) {\n            const { answer, removeIndex } = answerCheck();\n            if (answer) {\n                await removeItem(removeIndex);\n                const emptyIndex = await downItem(removeIndex);\n                await fillItem(emptyIndex);\n            } else break;\n        }\n    };\n\n    const removeItem = async index => {\n        await Promise.all(index.map(el => D1Animate.blink({ interval: 0.5, duration: 500, element: shapes[el], opacity: 1 })));\n        await Promise.all(index.map(el => D1Animate.blink({ interval: 0.5, duration: 500, element: shapes[el], opacity: 1 })));\n        await Promise.all(index.map(el => D1Animate.blink({ interval: 1, duration: 250, element: shapes[el], opacity: 1 })));\n    };\n\n    const downItem = async index => {\n        shapes.forEach((el, i) => index.includes(i) && el.remove());\n        const columnCheckArr = getTransposeArray(get2dimArray(shapes, columns));\n        const totalIndex = shapes.map((el, i) => i);\n        const remainIndex = [];\n        const animate = [];\n        columnCheckArr.forEach(el => {\n            el.forEach((el2, i) => {\n                const { index } = el2.data('data');\n                if (!el2.removed) {\n                    const count = el.reduce((p, c, j) => {\n                        if (i < j && c.removed) return (p += 1);\n                        else return p;\n                    }, 0);\n                    if (count > 0) {\n                        const moveIndex = index + columns * count;\n                        const { x, y } = point[moveIndex];\n                        el2.data('data').index = moveIndex;\n                        animate.push(el2.moveAnimate.bind(null, { x: x - size.width / 2, y: y - size.height / 2 }, window.mina.bounce, true));\n                        remainIndex.push(moveIndex);\n                    } else {\n                        remainIndex.push(index);\n                    }\n                }\n            });\n        });\n        const emptyIndex = totalIndex.filter(el => !remainIndex.includes(el));\n\n        await Promise.all(animate.map(el => el()));\n        return emptyIndex;\n    };\n\n    const fillItem = async index => {\n        const nextEmptyIndex = getNextArrayElement(index);\n        const animate = [];\n        shapes.forEach((el, i) => {\n            if (el.removed) {\n                const index = nextEmptyIndex.next().value;\n                const { type, imageIndex: url } = shuffle(getRandomArrayElement(items, 5))[0];\n\n                const { x, y } = point[index];\n                const imageG = image({ canvas: itemG, img: { url, scale: 0.7 }, x, y: 0, center: true });\n\n                imageG\n                    .rect(x - size.width / 2, -size.height / 2, size.width, size.height)\n                    .attr({ stroke: 'blue', opacity: '0' })\n                    .after(imageG.select('use'));\n\n                imageG.data('data', { type, index });\n\n                shapes[i] = D1drag({\n                    dragItem: imageG,\n                    startCallback: () => dragStartCallback(imageG),\n                    moveCallback: () => dragMoveCallback(imageG),\n                    endCallback: () => dragEndCallback(imageG)\n                });\n\n                animate[i] = shapes[i].moveAnimate.bind(null, { x: x - size.width / 2, y: y - size.height / 2 }, window.mina.bounce, true);\n            }\n        });\n        shapes.sort((a, b) => a.data('data').index - b.data('data').index);\n\n        await Promise.all(animate.map(el => el()));\n\n        function* getNextArrayElement(arr) {\n            for (let index = 0; index < arr.length; index++) yield arr[index];\n        }\n    };\n\n    const swapItem = async (first, second) => {\n        const firstIndex = first.data('data').index;\n        const secondIndex = second.data('data').index;\n        const indexes = [secondIndex, firstIndex];\n        const elements = [first, second];\n        const animates = indexes.map((el, i) => {\n            const { x, y } = point[el];\n            return elements[i].moveAnimate.bind(null, { x: x - size.width / 2, y: y - size.height / 2 });\n        });\n\n        await Promise.all(animates.map(el => el()));\n\n        first.data('data').index = secondIndex;\n        second.data('data').index = firstIndex;\n        shapes.sort((a, b) => a.data('data').index - b.data('data').index);\n    };\n\n    const answerCheck = () => {\n        const rowRemoveIndex = rowCheck();\n        const columRemoveIndex = columnCheck();\n        const totalRemoveIndex = getUniquArray([...rowRemoveIndex, ...columRemoveIndex]);\n        return { answer: Boolean(totalRemoveIndex.length > 0), removeIndex: totalRemoveIndex };\n    };\n\n    const rowCheck = () => {\n        let removeTargetIndex = [];\n        const rowCheckArr = get2dimArray(shapes, columns);\n\n        const rowResult = rowCheckArr.map(el3 => {\n            const removeIndex = [];\n            el3.forEach((el, i) => {\n                const currentType = el.data('data').type;\n                removeIndex[i] = [];\n                el3.some((el2, j) => {\n                    if (i > j) return false;\n                    if (currentType === el2.data('data').type) {\n                        removeIndex[i].push(el2.data('data').index);\n                        return false;\n                    } else return true;\n                });\n            });\n            return removeIndex;\n        });\n\n        rowResult.forEach(el =>\n            el.forEach(el2 => {\n                if (el2.length > sameNum - 1) removeTargetIndex = [...removeTargetIndex, ...el2];\n            })\n        );\n\n        return getUniquArray(removeTargetIndex);\n    };\n\n    const columnCheck = () => {\n        let removeTargetIndex = [];\n        const columnCheckArr = getTransposeArray(get2dimArray(shapes, columns));\n        const columnResult = columnCheckArr.map(el3 => {\n            const removeIndex = [];\n            el3.forEach((el, i) => {\n                const currentType = el.data('data').type;\n                removeIndex[i] = [];\n                el3.some((el2, j) => {\n                    if (i > j) return false;\n                    if (currentType === el2.data('data').type) {\n                        removeIndex[i].push(el2.data('data').index);\n                        return false;\n                    } else return true;\n                });\n            });\n            return removeIndex;\n        });\n\n        columnResult.forEach(el =>\n            el.forEach(el2 => {\n                if (el2.length > sameNum - 1) removeTargetIndex = [...removeTargetIndex, ...el2];\n            })\n        );\n        return getUniquArray(removeTargetIndex);\n    };\n\n    const getUserDropElementIndex = userDragItem => {\n        const { cx, cy } = userDragItem.getBBox();\n        const data = userDragItem.data('data');\n        let targetIndex;\n        shapes.some((el, i) => {\n            const shapeBBox = el.getBBox();\n            if (Snap.path.isPointInsideBBox(shapeBBox, cx, cy) && data.index !== i) {\n                targetIndex = i;\n                return true;\n            }\n            return false;\n        });\n        return targetIndex;\n    };\n\n    const start = async () => {\n        const { answer } = answerCheck();\n        answerAnimHandler(answer);\n    };\n\n    start();\n};\n","import Snap from 'sol-common/snap';\n\nexport const getSVGPoint = event => {\n    const svg = document.querySelector('#frame2d');\n    const pt = svg.createSVGPoint();\n    pt.x = event.clientX;\n    pt.y = event.clientY;\n    return pt.matrixTransform(svg.getScreenCTM().inverse());\n};\nexport const getUniquArray = arr => arr.filter((el, i) => arr.indexOf(el) === i);\nexport const get2dimArray = (arr, n) => {\n    const newArray = [];\n    arr.forEach((el, i) => {\n        const q = Math.floor(i / n);\n        const r = i % n;\n        if (r === 0) newArray[q] = [];\n        newArray[q][r] = el;\n    });\n    return newArray;\n};\nexport const getTransposeArray = arr => {\n    const newArray = [];\n    for (let i = 0; i < arr[0].length; i++) {\n        const tempArr = arr.map(el => el[i]);\n        newArray.push(tempArr);\n    }\n    return newArray;\n};\n\nexport const getClassNames = element => element.node.className.baseVal;\n\nexport const getPointInMatrixForm = ({ startPoint = { x: 0, y: 0 }, rows, columns, gap = { x: 0, y: 0 }, reverse = false, center = true }) => {\n    const point = [];\n    const offset = { x: center ? -gap.x * 0.5 * (columns - 1) : 0, y: center ? -gap.y * 0.5 * (rows - 1) : 0 };\n\n    for (let i = 0; i < rows; i++) {\n        for (let j = 0; j < columns; j++) {\n            const index = i * columns + j;\n            const [x, y] = [startPoint.x + gap.x * j + offset.x, startPoint.y + offset.y + (reverse ? -gap.y * i : gap.y * i)];\n            point[index] = { x, y };\n        }\n    }\n    return point;\n};\nexport const getPointInScatterForm = ({ area, pointNum, neighborhood }) => {\n    const points = [];\n    const isPointInsideBBox = (bbox, x, y) => Math.abs(bbox.cx - x) <= bbox.width / 2 && Math.abs(bbox.cy - y) <= bbox.height / 2;\n    const isBBoxIntersect = (bbox1, bbox2) =>\n        isPointInsideBBox(bbox2, bbox1.x, bbox1.y) ||\n        isPointInsideBBox(bbox2, bbox1.x2, bbox1.y) ||\n        isPointInsideBBox(bbox2, bbox1.x, bbox1.y2) ||\n        isPointInsideBBox(bbox2, bbox1.x2, bbox1.y2) ||\n        isPointInsideBBox(bbox1, bbox2.x, bbox2.y) ||\n        isPointInsideBBox(bbox1, bbox2.x2, bbox2.y) ||\n        isPointInsideBBox(bbox1, bbox2.x, bbox2.y2) ||\n        isPointInsideBBox(bbox1, bbox2.x2, bbox2.y2);\n\n    const limit = 1000;\n    let n = 0;\n\n    for (let index = 0; index < pointNum; index++) {\n        let repeat = true;\n        while (repeat && n < limit) {\n            const cx = getRandomNumber(area.x + neighborhood.width / 2, area.x + area.width - neighborhood.width / 2);\n            const cy = getRandomNumber(area.y + neighborhood.height / 2, area.y + area.height - neighborhood.height / 2);\n            const boundingBox = {\n                x: cx - neighborhood.width / 2,\n                x2: cx + neighborhood.width / 2,\n                cx,\n                y: cy - neighborhood.height / 2,\n                y2: cy + neighborhood.height / 2,\n                cy,\n                width: neighborhood.width,\n                height: neighborhood.height\n            };\n            const isOverlap = points.some(el => isBBoxIntersect(el, boundingBox));\n            if (!isOverlap) {\n                points.push(boundingBox);\n                repeat = false;\n            }\n            n += 1;\n        }\n    }\n\n    if (n === limit) console.error('CAN NOT GENERATE!!!');\n    return points;\n};\n\nexport const getCloseElement = (targetElement, elements) =>\n    elements.reduce((a, b) => {\n        const currentPoint = targetElement.getBBox().cx;\n        const beforeDx = Math.abs(a.getBBox().cx - currentPoint);\n        const currentDx = Math.abs(b.getBBox().cx - currentPoint);\n        return beforeDx > currentDx ? b : a;\n    }, elements[0]);\n\nexport const wait = (delay = 300) => new Promise(resolve => setTimeout(resolve, delay));\n\nexport const removeArrayElement = (arr, element) => arr.filter(el => el !== element);\nexport const getRandomArrayElement = (arr, n) => {\n    const newArray = shuffle(arr).slice(0, n);\n    while (newArray.length < n) {\n        newArray.push(shuffle(arr)[0]);\n    }\n    return newArray;\n};\nexport const getRandomNumber = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\nexport const getRandomNumberArray = (min, max, n, isUnique = true) => {\n    let randArr = [];\n    let uniqueArr = [];\n    if (isUnique) {\n        while (uniqueArr.length !== n) {\n            for (let index = 0; index < n; index++) {\n                randArr[index] = getRandomNumber(min, max);\n            }\n            uniqueArr = getUniquArray(randArr);\n        }\n    } else {\n        for (let index = 0; index < n; index++) {\n            randArr[index] = getRandomNumber(min, max);\n        }\n    }\n\n    return randArr;\n};\nexport const getSumArray = (arr) => arr.reduce((acc, num) => acc + num);\n\nexport const getSimultaneousEquationConstant = ([x1, y1], [x2, y2]) => {\n    const a = (y2 - y1) / (x2 - x1);\n    const b = y2 - a * x2;\n    return { a, b };\n};\n\nexport const convertToPathStr = {\n    line: ({ x1 = 0, y1 = 0, x2 = 0, y2 = 0 }) => 'M' + [x1, y1] + ' L' + [x2, y2],\n    rect: ({ x = 0, y = 0, width = 0, height = 0 }) => 'M' + [x, y] + ' l' + [0, height] + ' l' + [width, 0] + ' l' + [0, -height] + ' l' + [-width, 0],\n    circle: ({ cx = 0, cy = 0, r = 0 }) => 'M' + [cx + r, cy - r] + 'm' + [-r, 0] + 'a' + [r, r, 0, 1, 1, 0, r * 2] + 'a' + [r, r, 0, 1, 1, 0, -(r * 2)],\n    polygon: (..._rest) => {\n        const rest = Array.isArray(_rest[0]) ? _rest[0] : _rest;\n        return rest.reduce((a, b, i) => {\n            if (i === 0) return (a += b + ',');\n            else if (i === 1) return (a += b + ' ');\n            else if (i % 2 === 0) return (a += 'L' + b + ',');\n            else return (a += b + ' ');\n        }, 'M');\n    }\n};\n\nexport const shuffle = array => {\n    const copyArray = array.map(el => el);\n    for (let i = copyArray.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        const k = copyArray[i];\n        copyArray[i] = copyArray[j];\n        copyArray[j] = k;\n    }\n    return copyArray;\n};\n\nexport const makeArrayNumber = ({ startNum = 1, endNum }) => {\n    const rangeNum = [];\n    for (let i = startNum; i < endNum + 1; i++) {\n        rangeNum.push(i);\n    }\n    return rangeNum;\n};\n\nexport const isSameArray = (a, b) => {\n    let n;\n    if (a.length === b.length) {\n        n = 0;\n        a.forEach((el, i) => {\n            if (el === b[i]) n += 1;\n        });\n    }\n    return n === a.length;\n};\n\nexport const saveImage = svg => {\n    const canvas = document.createElement('canvas');\n    canvas.width = 800;\n    canvas.height = 800;\n    const data = new XMLSerializer().serializeToString(svg);\n    const blob = new Blob([data], { type: 'image/svg+xml' });\n    const img = new Image();\n    const url = URL.createObjectURL(blob);\n    img.src = url;\n\n    img.onload = () => {\n        canvas.width = img.width;\n        canvas.height = img.height;\n        canvas.getContext('2d')?.drawImage(img, 0, 0);\n        URL.revokeObjectURL(url);\n        const uri = canvas.toDataURL('image/png').replace('image/png', 'octet/stream');\n        console.log(uri);\n        const a = document.createElement('a');\n        a.href = uri;\n        a.download = 'myPhoto.png';\n        a.click();\n        URL.revokeObjectURL(uri);\n    };\n};\n\nexport const calculateAnswer = (num, sign) => {\n    let ans;\n    switch (sign) {\n        case '+':\n            ans = 0;\n            num.forEach(el => {\n                ans = ans + el;\n            });\n            break;\n        case '-':\n            num.forEach((el, i) => {\n                ans = i === 0 ? el : ans + el;\n            });\n            break;\n        case '*':\n            ans = 1;\n            num.forEach(el => {\n                ans = ans * el;\n            });\n            break;\n        case '/':\n            ans = {};\n            ans.q = Math.floor(num[0] / num[1]);\n            ans.r = num[0] % num[1];\n            break;\n    }\n    return ans;\n};\n","import Snap from 'sol-common/snap';\n\nconst D1Animate = {\n    drawPath: ({ path, duration }) => {\n        const totalLength = path.getTotalLength();\n        const pathStr = path.attr('d');\n        return new Promise(resolve => {\n            Snap.animate(\n                0,\n                1,\n                val => {\n                    const subPath = Snap.path.getSubpath(pathStr, 0, val * totalLength);\n                    path.attr({ d: subPath });\n                },\n                duration,\n                undefined,\n                resolve\n            );\n        });\n    },\n    moveTo: ({ dx, dy, duration, element, r = '' }) => {\n        return new Promise(resolve => {\n            Snap.animate(\n                0,\n                1,\n                val => {\n                    element.transform(`t ${dx * val} ${dy * val} ${r && 'r ' + r}`);\n                },\n                duration,\n                undefined,\n                resolve\n            );\n        });\n    },\n\n    onPath: ({ path, duration = 3000, element, local = '', easing }) => {\n        const startPt = Snap.path.getPointAtLength(path, 0);\n        return new Promise(resolve => {\n            Snap.animate(\n                0,\n                1,\n                val => {\n                    const { x, y } = Snap.path.getPointAtLength(path, val * Snap.path.getTotalLength(path));\n                    const transform = local + 't' + [x - startPt.x, y - startPt.y];\n                    element.transform(transform);\n                },\n                duration,\n                easing,\n                resolve\n            );\n        });\n    },\n    blink: ({ interval = 0.5, duration = 500, element, opacity = 1 }) => {\n        element.attr({ pointerEvents: 'none' });\n        return new Promise(resolve => {\n            Snap.animate(\n                0,\n                1,\n                val => {\n                    element.attr({ opacity: val });\n                },\n                duration,\n                val => {\n                    if (val < interval) return (-(1 / interval) * val + 1) * opacity;\n                    else return (1 / (1 - interval)) * (val - interval) * opacity;\n                },\n                resolve\n            );\n        });\n    },\n    flip: ({ front, duration }) => {\n        const { cx } = front.getBBox();\n        return new Promise(resolve => {\n            Snap.animate(0, 1, val => front.transform(Snap.matrix(1 - val, 0, 0, 1, val * cx, 0)), duration, undefined, resolve);\n        });\n    },\n    sliding: ({ element, dx, dy, hiddenTime, duration }) => {\n        const { local } = element.transform();\n        return new Promise(resolve => {\n            Snap.animate(\n                0,\n                1,\n                val => {\n                    const opacity = val < hiddenTime ? 1 : -(1 / (1 - hiddenTime)) * val + 1 / (1 - hiddenTime);\n                    element.attr({ opacity }).transform(local + 't' + [dx * val * val, dy * val * val]);\n                },\n                duration,\n                undefined,\n                () => {\n                    element.remove();\n                    resolve();\n                }\n            );\n        });\n    },\n    rolling: ({ element, directionAngle, duration, multiple, revolutions, easing = window.mina.linear, dxy }) => {\n        const { local } = element.transform();\n        const radius = element.getBBox().w / 2;\n        const radian = directionAngle * (Math.PI / 180);\n        const [x, y] = dxy\n            ? [dxy.x / revolutions / multiple, dxy.y / revolutions / multiple]\n            : [radius * Math.cos(radian) * Math.PI, -radius * Math.sin(radian) * Math.PI];\n        const sign = Math.cos(radian) < 0 ? -1 : 1;\n        const diretion = Math.abs(Math.sin(radian)) === 1 ? -Math.sin(radian) : sign;\n\n        return new Promise(resolve => {\n            Snap.animate(\n                0,\n                1,\n                val => {\n                    const translate = local + 't' + [revolutions * x * multiple * val, revolutions * y * multiple * val];\n                    const rotate = 'r' + diretion * val * (revolutions * 360);\n                    const scale = 's' + (1 + (multiple - 1) * val);\n                    element.transform(translate + rotate + scale);\n                },\n                duration,\n                easing,\n                resolve\n            );\n        });\n    },\n    shake: ({ duration, rotate, element, reverse = true }) => {\n        const sign = reverse ? 1 : -1;\n        const { local } = element.transform();\n        return new Promise(resolve =>\n            Snap.animate(\n                0,\n                1,\n                val => {\n                    if (val < 0.25) val = 4 * val;\n                    else if (val < 0.75) val = -4 * val + 2;\n                    else val = 4 * val - 4;\n                    element.transform(local + 'r' + sign * rotate * val);\n                },\n                duration,\n                undefined,\n                resolve\n            )\n        );\n    },\n    fadeIn: ({ element, duration, from = 0, to = 1 }) => {\n        return new Promise(resolve => {\n            const opacityNum = Number(element.attr('opacity'));\n            Snap.animate(\n                from,\n                to,\n                val => {\n                    element.attr('opacity', opacityNum + (1 - opacityNum) * val);\n                },\n                duration,\n                null,\n                resolve\n            );\n        });\n    },\n    zoom: ({ type, element, duration, begin, end, local = '', from = 0, to = 1 }) => {\n        return new Promise(resolve => {\n            let scale = 0;\n            !begin && (begin = type === 'in' ? 0 : 1);\n            !end && (end = type === 'in' ? 1 : 0);\n\n            Snap.animate(\n                from,\n                to,\n                val => {\n                    scale = type === 'in' ? begin + (1 - begin) * val + (end - 1) : 1 - val + (begin - 1) * (1 - val) + end * val;\n                    element.transform(`${local}s ${scale}`);\n                },\n                duration,\n                null,\n                resolve\n            );\n        });\n    }\n};\n\nexport default D1Animate;\n","import Snap from 'sol-common/snap';\nimport D1Animate from '../utils/D1Animate';\nimport { getRandomNumber } from '../utils/util';\n\nexport default function D1drag({ dragItem, draggingItem, startCallback, moveCallback, endCallback }) {\n    dragItem = dragItem.addClass('cp');\n    draggingItem && draggingItem.attr({ opacity: '0', pointerEvents: 'none' });\n\n    const originPoint = dragItem.getBBox();\n    const dragStart = element => element.data('originTransform', element.transform().local);\n    const dragMove = (elemenet, dx, dy) => {\n        const origin = elemenet.data('originTransform') || '';\n        const snapInvMatrix = elemenet.transform().diffMatrix.invert();\n        dx = snapInvMatrix.x(dx, dy);\n        dy = snapInvMatrix.y(dx, dy);\n        elemenet.transform(origin + 't' + [dx, dy]);\n    };\n    const dragEnd = element => element.data('originTransform', element.transform().local);\n\n    const start = () => {\n        dragStart(dragItem);\n        if (draggingItem) {\n            setDragState(false);\n            dragStart(draggingItem);\n        }\n        if (startCallback) startCallback();\n    };\n    const move = (dx, dy) => {\n        dragMove(dragItem, dx, dy);\n        if (draggingItem) {\n            setDragState(false);\n            dragMove(draggingItem, dx, dy);\n        }\n        if (moveCallback) moveCallback();\n    };\n    const end = () => {\n        dragEnd(dragItem);\n        if (draggingItem) {\n            setDragState(true);\n            dragEnd(draggingItem);\n        }\n        if (endCallback) endCallback();\n    };\n\n    const setDragState = bool => {\n        dragItem.attr({ opacity: Number(bool) });\n        draggingItem.attr({ opacity: Number(!bool) });\n    };\n\n    const animate = async ({ pathStr, easing, randomDuration: _randomDuration }) => {\n        const { local } = dragItem.transform();\n        dragItem.attr({ pointerEvents: 'none' });\n        const randomDuration = _randomDuration ? getRandomNumber(800, 1100) : 500;\n        if (draggingItem) {\n            D1Animate.onPath({ path: pathStr, duration: randomDuration, element: dragItem, local, easing });\n            await D1Animate.onPath({ path: pathStr, duration: randomDuration, element: draggingItem, local, easing });\n        } else {\n            await D1Animate.onPath({ path: pathStr, duration: randomDuration, element: dragItem, local, easing });\n        }\n        dragItem.attr({ pointerEvents: 'auto' });\n    };\n\n    dragItem.spectrumEffect = ({ interval: _interval = 100, duration = 750 }) => {\n        const interval = setInterval(() => {\n            const clone = dragItem.clone();\n            clone.after(dragItem);\n            Snap.animate(\n                1,\n                0,\n                val => clone.attr({ opacity: val }),\n                duration,\n                undefined,\n                () => clone.remove()\n            );\n        }, _interval);\n\n        const remove = () => clearInterval(interval);\n\n        return { remove };\n    };\n\n    dragItem.moveAnimate = async (point, easing, randomDuration) => {\n        const { x, y } = dragItem.getBBox();\n        const pathStr = 'M' + [x, y] + 'L' + [point.x, point.y];\n        await animate({ pathStr, easing, randomDuration });\n    };\n    dragItem.reset = async (dx = 0, dy = 0) => {\n        const { x, y } = dragItem.getBBox();\n        const pathStr = 'M' + [x, y] + 'L' + [originPoint.x + dx, originPoint.y + dy];\n        await animate({ pathStr });\n    };\n    dragItem.moveAnimateWithScale = ({ dx, dy, scale }) => {\n        const { local } = dragItem.transform();\n        return new Promise(resolve => {\n            Snap.animate(\n                0,\n                1,\n                val => {\n                    const move = 't' + [val * dx, val * dy];\n                    const _scale = 's' + (1 - ((scale.from - scale.to) / scale.from) * val);\n                    dragItem.transform(local + move + _scale);\n                },\n                750,\n                undefined,\n                resolve\n            );\n        });\n    };\n    dragItem.hidden = () => dragItem.attr({ opacity: '0', pointerEvents: 'none' });\n    dragItem.drag(move, start, end);\n\n    return dragItem;\n}\n"],"sourceRoot":""}