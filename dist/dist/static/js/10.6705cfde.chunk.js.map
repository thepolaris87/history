{"version":3,"sources":["webpack:///./src/modules/DM000003.js","webpack:///./src/utils/util.js","webpack:///./src/utils/D1Animate.js","webpack:///./src/components/D1dimmer.js","webpack:///./src/components/D1Timer.js","webpack:///./src/assets/images/D1timer.svg"],"names":["DM000003","canvas","callback","metaData","background","itemList","drawingItemAttrs","feedback","itemAttrs","common","itemNums","items","backgroundG","g","addClass","activityG","itemG","drawingG","hintG","feedbackG","timer","Timer","timeout","randomItems","curIdx","createItemList","imagesByShape","reduce","shapes","item","type","push","imageIndex","numberByShape","Object","keys","max","total","randomNum","entries","nums","i","arr","num","length","getRandomNumber","getNumbersByShape","id","selectedItems","randomImages","shuffle","getRandomItems","gap","centerOffset","x","y","offset","opacity","scale","pointList","getPointInMatrixForm","startPoint","rows","columns","center","forEach","cx","cy","imgName","split","pop","image","img","url","attr","data","transform","pathElement","SOL","imageDefs","select","path","r","_image","drawBackground","createDrawing","drawingItemG","drawingItem","splice","drawingItemBBox","traceG","handHint","confetti","getBBox","guideG","pathG","clippath","drawingItemTstr","local","guidePath","strokeWidth","strokeDasharray","strokeDashoffset","endDraw","drawingCx","drawingCy","targetId","pairItem","selectAll","el","remove","D1Animate","fadeIn","element","duration","playFeedback","moveTo","dx","dy","zoom","begin","end","next","finish","animates","shake","bind","rotate","reverse","Promise","all","map","shakeItem","trace","fillPath","strokePath","strokePathClassName","onComplete","oneWay","dragElScale","sensitive","endOffset","clipPath","pointerdown","removeHint","hint","dragTime","pathStr","Snap","matrix","translate","hintWidth","hintHeight","createDrawingPath","pointerEvents","createFeedback","init","getUniquArray","filter","indexOf","get2dimArray","n","newArray","q","Math","floor","getTransposeArray","tempArr","point","j","index","getPointInScatterForm","area","pointNum","neighborhood","points","isPointInsideBBox","bbox","abs","width","height","repeat","boundingBox","x2","y2","some","bbox2","bbox1","console","error","wait","delay","resolve","setTimeout","getRandomArrayElement","slice","min","random","getRandomNumberArray","isUnique","randArr","uniqueArr","getSumArray","acc","getSimultaneousEquationConstant","x1","y1","a","b","convertToPathStr","line","rect","circle","polygon","_rest","rest","Array","isArray","array","copyArray","k","makeArrayNumber","startNum","endNum","rangeNum","isSameArray","saveImage","svg","document","createElement","XMLSerializer","serializeToString","blob","Blob","Image","URL","createObjectURL","src","onload","getContext","drawImage","revokeObjectURL","uri","toDataURL","replace","log","href","download","click","calculateAnswer","sign","ans","drawPath","totalLength","getTotalLength","animate","val","subPath","getSubpath","d","undefined","onPath","easing","startPt","getPointAtLength","blink","interval","flip","front","sliding","hiddenTime","rolling","directionAngle","multiple","revolutions","window","mina","linear","dxy","radius","w","radian","PI","cos","sin","diretion","from","to","opacityNum","Number","Dimmer","dimmerG","visibility","this","show","hide","before","options","timerData","timerBg","numberAttrs","fontSize","color","className","progress","beforeStopCb","afterStopCb","seconds","timerInterval","isPlaying","progressPath","pathTotalLength","dimmer","animateTimeout","timerGBBox","timerG","cb","t","animateRotation","startInterval","secondTextEl","setInterval","stop","text","lengthPerTime","endTime","destroy","clearInterval","reset","pause","start","bgImg","imgBg","loadImage","key","use","append","backgroundBBox","timerTextG","toString","fill","textAnchor","textGBBox","h","progressG","progressPathStr","strokeClass","class","module","exports"],"mappings":"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","file":"static/js/10.6705cfde.chunk.js","sourcesContent":["import { hint, image } from 'sol-common';\nimport Snap from 'sol-common/snap';\nimport { SOL } from 'sol-common/util';\nimport trace from 'sol-common/components/trace';\nimport D1Animate from '../utils/D1Animate';\nimport { getPointInMatrixForm, getRandomNumber, shuffle } from '../utils/util';\nimport Timer from '../components/D1Timer';\n\nexport default function DM000003({ canvas, callback, ...metaData }) {\n    const { background, itemList, drawingItemAttrs, feedback } = metaData;\n    const { common: itemAttrs, itemNums, items } = itemList;\n\n    const backgroundG = canvas.g().addClass('background');\n    const activityG = canvas.g().addClass('activity');\n    const itemG = activityG.g().addClass('items');\n    const drawingG = activityG.g().addClass('drawing');\n    const hintG = activityG.g().addClass('hint');\n    const feedbackG = activityG.g().addClass('feedback');\n    const timer = new Timer(canvas, { timeout: 60 });\n\n    let randomItems = [];\n    let curIdx = 0;\n\n    const drawBackground = () => {\n        const { image: _image } = background;\n        const { x, y, imageIndex: url, scale } = _image;\n        image({ canvas: backgroundG, x, y, img: { url, scale }, center: true });\n    };\n\n    const getRandomItems = () => {\n        const getImagesByShape = () =>\n            items.reduce((shapes, item) => {\n                shapes[item.type] ||= [];\n                shapes[item.type].push(item.imageIndex);\n                return shapes;\n            }, {});\n\n        const getNumbersByShape = () => {\n            const shapes = itemNums\n                ? Object.keys(itemNums)\n                : ['circle', 'rect', 'triangle'];\n            const limit = 5;\n            const min = 1;\n            let max = 5;\n            let total = 0;\n            let randomNum = 0;\n\n            if (itemNums) {\n                return Object.entries(itemNums).reduce(\n                    (nums, [type, num], i, arr) => {\n                        max = limit - total - min * (arr.length - (1 + i));\n                        randomNum = getRandomNumber(min, max);\n                        nums[type] =\n                            typeof num === 'number' && num >= 0 && num <= max\n                                ? num\n                                : randomNum;\n                        total += nums[type];\n                        return nums;\n                    },\n                    {}\n                );\n            } else {\n                return shapes.reduce((nums, type, i) => {\n                    max = limit - total - min * (shapes.length - (1 + i));\n                    randomNum = getRandomNumber(min, max);\n                    nums[type] = randomNum;\n                    total += randomNum;\n                    return nums;\n                }, {});\n            }\n        };\n\n        const imagesByShape = getImagesByShape();\n        const numberByShape = getNumbersByShape();\n        let id = 0;\n\n        const selectedItems = Object.entries(numberByShape).reduce(\n            (randomItems, [type, length]) => {\n                if (!imagesByShape[type]) return randomItems;\n\n                const randomImages = shuffle(imagesByShape[type]);\n                for (let i = 0; i < length; i++) {\n                    randomItems = [\n                        ...randomItems,\n                        { id, type, imageIndex: randomImages[i] },\n                    ];\n                    id++;\n                }\n                return randomItems;\n            },\n            []\n        );\n\n        return shuffle(selectedItems);\n    };\n\n    const createItemList = () => {\n        randomItems = getRandomItems();\n\n        const {\n            gap,\n            centerOffset = { x: 0, y: 0 },\n            offset = { x: 0, y: 0 },\n            opacity,\n            scale,\n        } = itemAttrs;\n        const [startX, startY] = [400, 420];\n        const pointList = getPointInMatrixForm({\n            startPoint: {\n                x: startX + centerOffset.x,\n                y: startY + centerOffset.y,\n            },\n            rows: 1,\n            columns: randomItems.length,\n            gap: { x: gap, y: 0 },\n            center: true,\n        });\n\n        randomItems.forEach((item, i, arr) => {\n            const { imageIndex, id } = item;\n            const { x: cx, y: cy } = pointList[i];\n            const randomNum = getRandomNumber(-16, 16);\n            const x = cx + offset.x + randomNum;\n            const y = cy + offset.y + randomNum;\n            const imgName = imageIndex.split('/').pop().split('.')[0];\n\n            image({\n                canvas: itemG,\n                x,\n                y,\n                img: { url: imageIndex, scale },\n                center: true,\n            })\n                .addClass('item')\n                .attr({ opacity })\n                .data('itemId', id)\n                .transform(`r ${randomNum}`);\n\n            const pathElement = SOL.imageDefs[imgName].select('.guide');\n            const path =\n                pathElement.type === 'path'\n                    ? pathElement.attr('d')\n                    : `M${pathElement.attr('points')} Z`;\n\n            arr[i] = {\n                ...item,\n                path,\n                x,\n                y,\n                r: randomNum,\n            };\n        });\n    };\n\n    const createDrawing = () => {\n        const drawingItemG = drawingG.g().addClass('drawing-item');\n        const {\n            cx,\n            cy,\n            offset = { x: 0, y: 0 },\n            opacity,\n            scale,\n        } = drawingItemAttrs;\n        const drawingItem = randomItems.splice(\n            getRandomNumber(0, randomItems.length - 1),\n            1\n        )[0];\n\n        let drawingItemBBox = null;\n        let traceG = null;\n        let handHint = null;\n        let confetti = null;\n\n        const createDrawingItem = () => {\n            image({\n                canvas: drawingItemG,\n                x: cx + offset.x,\n                y: cy + offset.y,\n                img: { url: drawingItem.imageIndex, scale },\n                center: true,\n            });\n\n            drawingItemBBox = drawingItemG.getBBox();\n            drawingItemG\n                .transform(`r ${drawingItem.r}`)\n                .attr('opacity', opacity);\n        };\n\n        const createDrawingPath = () => {\n            const guideG = drawingG.g().addClass('guide-path');\n            const pathG = drawingG.g().addClass('drawing-path');\n            const clippath = drawingItem.path;\n            const path = drawingItem.path;\n            const drawingItemTstr = `${\n                drawingItem.r ? drawingItemG.transform().local : ''\n            }t ${drawingItemBBox.x} ${drawingItemBBox.y}`;\n\n            const guidePath = guideG.path(path).addClass('fno s01').attr({\n                strokeWidth: 10,\n                strokeDasharray: 30,\n                strokeDashoffset: 0,\n                opacity: 0.5,\n                transform: drawingItemTstr,\n            });\n\n            const createHint = () => {\n                const [hintWidth, hintHeight] = [30.08, 30.48];\n                handHint = hint({\n                    canvas: hintG,\n                    type: 1,\n                    dragTime: 3000,\n                    pathStr: Snap.path.map(\n                        path,\n                        guidePath.matrix.translate(\n                            hintWidth / 2,\n                            hintHeight / 2\n                        )\n                    ),\n                });\n            };\n\n            const endDraw = async () => {\n                const { cx: drawingCx, cy: drawingCy } = drawingItemBBox;\n                const targetId = drawingItem.id;\n                let pairItem = null;\n\n                for (const el of itemG.selectAll('.item').items) {\n                    if (el.data('itemId') === targetId) {\n                        pairItem = el;\n                        break;\n                    }\n                }\n\n                pathG.remove();\n                guideG.remove();\n\n                D1Animate.fadeIn({ element: drawingItemG, duration: 800 });\n                await playFeedback();\n                await D1Animate.moveTo({\n                    element: drawingItemG,\n                    dx: drawingItem.x - drawingCx,\n                    dy: drawingItem.y - drawingCy,\n                    r: drawingItem.r || '',\n                    duration: 700,\n                });\n                await D1Animate.zoom({\n                    type: 'out',\n                    element: drawingItemG,\n                    duration: 300,\n                    begin: drawingItemAttrs.scale,\n                    end: itemAttrs.scale,\n                    local: drawingItemG.transform().local,\n                });\n                pairItem.attr({ opacity: 1 });\n                drawingItemG.remove();\n                (randomItems.length ? next : finish)();\n            };\n\n            const playFeedback = async () => {\n                D1Animate.zoom({\n                    type: 'in',\n                    element: confetti,\n                    duration: 800,\n                });\n                await D1Animate.fadeIn({ element: confetti, duration: 1200 });\n                await confetti.remove();\n            };\n\n            const next = () => {\n                curIdx++;\n                createDrawing();\n            };\n\n            const finish = async () => {\n                const animates = [];\n                await D1Animate.moveTo({\n                    element: itemG,\n                    dx: 0,\n                    dy: -200,\n                    duration: 500,\n                });\n\n                itemG.selectAll('.item').forEach((item, i) => {\n                    animates[i] = D1Animate.shake.bind(null, {\n                        element: item,\n                        rotate: 10,\n                        duration: 1000,\n                        reverse: i % 2,\n                    });\n                });\n                await Promise.all(animates.map((shakeItem) => shakeItem()));\n                callback();\n            };\n\n            traceG = trace({\n                canvas: pathG,\n                fillPath: clippath,\n                strokePath: path,\n                strokePathClassName: 'fno s02',\n                onComplete: endDraw,\n                strokeWidth: 11,\n                oneWay: true,\n                dragElScale: 0.15,\n                sensitive: 60,\n                endOffset: 12,\n            }).transform(drawingItemTstr);\n\n            traceG.select('path').attr({ clipPath: 'none' });\n\n            traceG.select('.cp').pointerdown(() => {\n                handHint?.removeHint();\n            });\n\n            curIdx || createHint();\n        };\n\n        const createFeedback = () => {\n            const { cx, cy } = drawingItemG.getBBox();\n            confetti = image({\n                canvas: feedbackG,\n                x: cx,\n                y: cy,\n                img: { url: feedback.image.url },\n                center: true,\n            }).attr({ opacity: 0, pointerEvents: 'none' });\n        };\n\n        createDrawingItem();\n        createDrawingPath();\n        createFeedback();\n    };\n\n    const start = () => {\n        drawBackground();\n        createItemList();\n        createDrawing();\n        timer.init();\n    };\n\n    start();\n}\n","import Snap from 'sol-common/snap';\n\nexport const getSVGPoint = event => {\n    const svg = document.querySelector('#frame2d');\n    const pt = svg.createSVGPoint();\n    pt.x = event.clientX;\n    pt.y = event.clientY;\n    return pt.matrixTransform(svg.getScreenCTM().inverse());\n};\nexport const getUniquArray = arr => arr.filter((el, i) => arr.indexOf(el) === i);\nexport const get2dimArray = (arr, n) => {\n    const newArray = [];\n    arr.forEach((el, i) => {\n        const q = Math.floor(i / n);\n        const r = i % n;\n        if (r === 0) newArray[q] = [];\n        newArray[q][r] = el;\n    });\n    return newArray;\n};\nexport const getTransposeArray = arr => {\n    const newArray = [];\n    for (let i = 0; i < arr[0].length; i++) {\n        const tempArr = arr.map(el => el[i]);\n        newArray.push(tempArr);\n    }\n    return newArray;\n};\n\nexport const getClassNames = element => element.node.className.baseVal;\n\nexport const getPointInMatrixForm = ({ startPoint = { x: 0, y: 0 }, rows, columns, gap = { x: 0, y: 0 }, reverse = false, center = true }) => {\n    const point = [];\n    const offset = { x: center ? -gap.x * 0.5 * (columns - 1) : 0, y: center ? -gap.y * 0.5 * (rows - 1) : 0 };\n\n    for (let i = 0; i < rows; i++) {\n        for (let j = 0; j < columns; j++) {\n            const index = i * columns + j;\n            const [x, y] = [startPoint.x + gap.x * j + offset.x, startPoint.y + offset.y + (reverse ? -gap.y * i : gap.y * i)];\n            point[index] = { x, y };\n        }\n    }\n    return point;\n};\nexport const getPointInScatterForm = ({ area, pointNum, neighborhood }) => {\n    const points = [];\n    const isPointInsideBBox = (bbox, x, y) => Math.abs(bbox.cx - x) <= bbox.width / 2 && Math.abs(bbox.cy - y) <= bbox.height / 2;\n    const isBBoxIntersect = (bbox1, bbox2) =>\n        isPointInsideBBox(bbox2, bbox1.x, bbox1.y) ||\n        isPointInsideBBox(bbox2, bbox1.x2, bbox1.y) ||\n        isPointInsideBBox(bbox2, bbox1.x, bbox1.y2) ||\n        isPointInsideBBox(bbox2, bbox1.x2, bbox1.y2) ||\n        isPointInsideBBox(bbox1, bbox2.x, bbox2.y) ||\n        isPointInsideBBox(bbox1, bbox2.x2, bbox2.y) ||\n        isPointInsideBBox(bbox1, bbox2.x, bbox2.y2) ||\n        isPointInsideBBox(bbox1, bbox2.x2, bbox2.y2);\n\n    const limit = 1000;\n    let n = 0;\n\n    for (let index = 0; index < pointNum; index++) {\n        let repeat = true;\n        while (repeat && n < limit) {\n            const cx = getRandomNumber(area.x + neighborhood.width / 2, area.x + area.width - neighborhood.width / 2);\n            const cy = getRandomNumber(area.y + neighborhood.height / 2, area.y + area.height - neighborhood.height / 2);\n            const boundingBox = {\n                x: cx - neighborhood.width / 2,\n                x2: cx + neighborhood.width / 2,\n                cx,\n                y: cy - neighborhood.height / 2,\n                y2: cy + neighborhood.height / 2,\n                cy,\n                width: neighborhood.width,\n                height: neighborhood.height\n            };\n            const isOverlap = points.some(el => isBBoxIntersect(el, boundingBox));\n            if (!isOverlap) {\n                points.push(boundingBox);\n                repeat = false;\n            }\n            n += 1;\n        }\n    }\n\n    if (n === limit) console.error('CAN NOT GENERATE!!!');\n    return points;\n};\n\nexport const getCloseElement = (targetElement, elements) =>\n    elements.reduce((a, b) => {\n        const currentPoint = targetElement.getBBox().cx;\n        const beforeDx = Math.abs(a.getBBox().cx - currentPoint);\n        const currentDx = Math.abs(b.getBBox().cx - currentPoint);\n        return beforeDx > currentDx ? b : a;\n    }, elements[0]);\n\nexport const wait = (delay = 300) => new Promise(resolve => setTimeout(resolve, delay));\n\nexport const removeArrayElement = (arr, element) => arr.filter(el => el !== element);\nexport const getRandomArrayElement = (arr, n) => {\n    const newArray = shuffle(arr).slice(0, n);\n    while (newArray.length < n) {\n        newArray.push(shuffle(arr)[0]);\n    }\n    return newArray;\n};\nexport const getRandomNumber = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\nexport const getRandomNumberArray = (min, max, n, isUnique = true) => {\n    let randArr = [];\n    let uniqueArr = [];\n    if (isUnique) {\n        while (uniqueArr.length !== n) {\n            for (let index = 0; index < n; index++) {\n                randArr[index] = getRandomNumber(min, max);\n            }\n            uniqueArr = getUniquArray(randArr);\n        }\n    } else {\n        for (let index = 0; index < n; index++) {\n            randArr[index] = getRandomNumber(min, max);\n        }\n    }\n\n    return randArr;\n};\nexport const getSumArray = (arr) => arr.reduce((acc, num) => acc + num);\n\nexport const getSimultaneousEquationConstant = ([x1, y1], [x2, y2]) => {\n    const a = (y2 - y1) / (x2 - x1);\n    const b = y2 - a * x2;\n    return { a, b };\n};\n\nexport const convertToPathStr = {\n    line: ({ x1 = 0, y1 = 0, x2 = 0, y2 = 0 }) => 'M' + [x1, y1] + ' L' + [x2, y2],\n    rect: ({ x = 0, y = 0, width = 0, height = 0 }) => 'M' + [x, y] + ' l' + [0, height] + ' l' + [width, 0] + ' l' + [0, -height] + ' l' + [-width, 0],\n    circle: ({ cx = 0, cy = 0, r = 0 }) => 'M' + [cx + r, cy - r] + 'm' + [-r, 0] + 'a' + [r, r, 0, 1, 1, 0, r * 2] + 'a' + [r, r, 0, 1, 1, 0, -(r * 2)],\n    polygon: (..._rest) => {\n        const rest = Array.isArray(_rest[0]) ? _rest[0] : _rest;\n        return rest.reduce((a, b, i) => {\n            if (i === 0) return (a += b + ',');\n            else if (i === 1) return (a += b + ' ');\n            else if (i % 2 === 0) return (a += 'L' + b + ',');\n            else return (a += b + ' ');\n        }, 'M');\n    }\n};\n\nexport const shuffle = array => {\n    const copyArray = array.map(el => el);\n    for (let i = copyArray.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        const k = copyArray[i];\n        copyArray[i] = copyArray[j];\n        copyArray[j] = k;\n    }\n    return copyArray;\n};\n\nexport const makeArrayNumber = ({ startNum = 1, endNum }) => {\n    const rangeNum = [];\n    for (let i = startNum; i < endNum + 1; i++) {\n        rangeNum.push(i);\n    }\n    return rangeNum;\n};\n\nexport const isSameArray = (a, b) => {\n    let n;\n    if (a.length === b.length) {\n        n = 0;\n        a.forEach((el, i) => {\n            if (el === b[i]) n += 1;\n        });\n    }\n    return n === a.length;\n};\n\nexport const saveImage = svg => {\n    const canvas = document.createElement('canvas');\n    canvas.width = 800;\n    canvas.height = 800;\n    const data = new XMLSerializer().serializeToString(svg);\n    const blob = new Blob([data], { type: 'image/svg+xml' });\n    const img = new Image();\n    const url = URL.createObjectURL(blob);\n    img.src = url;\n\n    img.onload = () => {\n        canvas.width = img.width;\n        canvas.height = img.height;\n        canvas.getContext('2d')?.drawImage(img, 0, 0);\n        URL.revokeObjectURL(url);\n        const uri = canvas.toDataURL('image/png').replace('image/png', 'octet/stream');\n        console.log(uri);\n        const a = document.createElement('a');\n        a.href = uri;\n        a.download = 'myPhoto.png';\n        a.click();\n        URL.revokeObjectURL(uri);\n    };\n};\n\nexport const calculateAnswer = (num, sign) => {\n    let ans;\n    switch (sign) {\n        case '+':\n            ans = 0;\n            num.forEach(el => {\n                ans = ans + el;\n            });\n            break;\n        case '-':\n            num.forEach((el, i) => {\n                ans = i === 0 ? el : ans + el;\n            });\n            break;\n        case '*':\n            ans = 1;\n            num.forEach(el => {\n                ans = ans * el;\n            });\n            break;\n        case '/':\n            ans = {};\n            ans.q = Math.floor(num[0] / num[1]);\n            ans.r = num[0] % num[1];\n            break;\n    }\n    return ans;\n};\n","import Snap from 'sol-common/snap';\n\nconst D1Animate = {\n    drawPath: ({ path, duration }) => {\n        const totalLength = path.getTotalLength();\n        const pathStr = path.attr('d');\n        return new Promise(resolve => {\n            Snap.animate(\n                0,\n                1,\n                val => {\n                    const subPath = Snap.path.getSubpath(pathStr, 0, val * totalLength);\n                    path.attr({ d: subPath });\n                },\n                duration,\n                undefined,\n                resolve\n            );\n        });\n    },\n    moveTo: ({ dx, dy, duration, element, r = '' }) => {\n        return new Promise(resolve => {\n            Snap.animate(\n                0,\n                1,\n                val => {\n                    element.transform(`t ${dx * val} ${dy * val} ${r && 'r ' + r}`);\n                },\n                duration,\n                undefined,\n                resolve\n            );\n        });\n    },\n\n    onPath: ({ path, duration = 3000, element, local = '', easing }) => {\n        const startPt = Snap.path.getPointAtLength(path, 0);\n        return new Promise(resolve => {\n            Snap.animate(\n                0,\n                1,\n                val => {\n                    const { x, y } = Snap.path.getPointAtLength(path, val * Snap.path.getTotalLength(path));\n                    const transform = local + 't' + [x - startPt.x, y - startPt.y];\n                    element.transform(transform);\n                },\n                duration,\n                easing,\n                resolve\n            );\n        });\n    },\n    blink: ({ interval = 0.5, duration = 500, element, opacity = 1 }) => {\n        element.attr({ pointerEvents: 'none' });\n        return new Promise(resolve => {\n            Snap.animate(\n                0,\n                1,\n                val => {\n                    element.attr({ opacity: val });\n                },\n                duration,\n                val => {\n                    if (val < interval) return (-(1 / interval) * val + 1) * opacity;\n                    else return (1 / (1 - interval)) * (val - interval) * opacity;\n                },\n                resolve\n            );\n        });\n    },\n    flip: ({ front, duration }) => {\n        const { cx } = front.getBBox();\n        return new Promise(resolve => {\n            Snap.animate(0, 1, val => front.transform(Snap.matrix(1 - val, 0, 0, 1, val * cx, 0)), duration, undefined, resolve);\n        });\n    },\n    sliding: ({ element, dx, dy, hiddenTime, duration }) => {\n        const { local } = element.transform();\n        return new Promise(resolve => {\n            Snap.animate(\n                0,\n                1,\n                val => {\n                    const opacity = val < hiddenTime ? 1 : -(1 / (1 - hiddenTime)) * val + 1 / (1 - hiddenTime);\n                    element.attr({ opacity }).transform(local + 't' + [dx * val * val, dy * val * val]);\n                },\n                duration,\n                undefined,\n                () => {\n                    element.remove();\n                    resolve();\n                }\n            );\n        });\n    },\n    rolling: ({ element, directionAngle, duration, multiple, revolutions, easing = window.mina.linear, dxy }) => {\n        const { local } = element.transform();\n        const radius = element.getBBox().w / 2;\n        const radian = directionAngle * (Math.PI / 180);\n        const [x, y] = dxy\n            ? [dxy.x / revolutions / multiple, dxy.y / revolutions / multiple]\n            : [radius * Math.cos(radian) * Math.PI, -radius * Math.sin(radian) * Math.PI];\n        const sign = Math.cos(radian) < 0 ? -1 : 1;\n        const diretion = Math.abs(Math.sin(radian)) === 1 ? -Math.sin(radian) : sign;\n\n        return new Promise(resolve => {\n            Snap.animate(\n                0,\n                1,\n                val => {\n                    const translate = local + 't' + [revolutions * x * multiple * val, revolutions * y * multiple * val];\n                    const rotate = 'r' + diretion * val * (revolutions * 360);\n                    const scale = 's' + (1 + (multiple - 1) * val);\n                    element.transform(translate + rotate + scale);\n                },\n                duration,\n                easing,\n                resolve\n            );\n        });\n    },\n    shake: ({ duration, rotate, element, reverse = true }) => {\n        const sign = reverse ? 1 : -1;\n        const { local } = element.transform();\n        return new Promise(resolve =>\n            Snap.animate(\n                0,\n                1,\n                val => {\n                    if (val < 0.25) val = 4 * val;\n                    else if (val < 0.75) val = -4 * val + 2;\n                    else val = 4 * val - 4;\n                    element.transform(local + 'r' + sign * rotate * val);\n                },\n                duration,\n                undefined,\n                resolve\n            )\n        );\n    },\n    fadeIn: ({ element, duration, from = 0, to = 1 }) => {\n        return new Promise(resolve => {\n            const opacityNum = Number(element.attr('opacity'));\n            Snap.animate(\n                from,\n                to,\n                val => {\n                    element.attr('opacity', opacityNum + (1 - opacityNum) * val);\n                },\n                duration,\n                null,\n                resolve\n            );\n        });\n    },\n    zoom: ({ type, element, duration, begin, end, local = '', from = 0, to = 1 }) => {\n        return new Promise(resolve => {\n            let scale = 0;\n            !begin && (begin = type === 'in' ? 0 : 1);\n            !end && (end = type === 'in' ? 1 : 0);\n\n            Snap.animate(\n                from,\n                to,\n                val => {\n                    scale = type === 'in' ? begin + (1 - begin) * val + (end - 1) : 1 - val + (begin - 1) * (1 - val) + end * val;\n                    element.transform(`${local}s ${scale}`);\n                },\n                duration,\n                null,\n                resolve\n            );\n        });\n    }\n};\n\nexport default D1Animate;\n","export default function Dimmer(canvas) {\n  const dimmerG = canvas.g().addClass('dimmer').attr({ visibility: 'hidden' });\n  const createBackground = () => {\n    dimmerG.rect(0, 0, 800, 500).addClass('f01 sno').attr({ opacity: 0.8 });\n  };\n\n  this.show = () => {\n    dimmerG.attr('visibility', 'visible');\n  };\n\n  this.hide = () => {\n    dimmerG.attr('visibility', 'hidden');\n  };\n\n  createBackground();\n  canvas.before(dimmerG);\n\n  return this;\n}\n","import { loadImage } from 'sol-common';\nimport Snap from 'sol-common/snap';\nimport { convertToPathStr } from '../utils/util';\nimport Dimmer from './D1dimmer';\nimport timerBg from '../assets/images/D1timer.svg';\n\nexport default function Timer(canvas, options) {\n    const timerData = {\n        background: {\n            image: {\n                src: timerBg,\n                x: 735,\n                y: 10,\n                scale: 1,\n            },\n        },\n        numberAttrs: {\n            fontSize: 24,\n            color: '#1C233C',\n            offset: { x: 0, y: -3 },\n            className: '',\n        },\n        progress: {\n            strokeWidth: 3,\n            className: 's02',\n            offset: { x: -0.5, y: 2.5 },\n        },\n        timeout: 60 || 999, // TODO: 제한 시간 데어터 연동 추가\n        ...options,\n    };\n    const {\n        background,\n        numberAttrs,\n        progress,\n        timeout,\n        beforeStopCb,\n        afterStopCb,\n    } = timerData;\n\n    let seconds = 0;\n    let timerInterval = null;\n    let isPlaying = false;\n    let progressPath = null;\n    let pathTotalLength = 0;\n    let dimmer = null;\n\n    const animateTimeout = () => {\n        const timerGBBox = this.timerG.getBBox();\n        const duration = 1000;\n        const cx = 400;\n        const cy = 250;\n        const scale = 2;\n\n        const animateRotation = (cb) => {\n            const local = this.timerG.transform().local;\n            Snap.animate(\n                0,\n                100,\n                (val) => {\n                    const t = Math.floor(val / 10) % 2 ? 5 : -5;\n                    this.timerG.transform(`${local} t${t} `);\n                },\n                600,\n                null,\n                () => {\n                    this.timerG.transform(`${local} t0 `);\n                    cb();\n                }\n            );\n        };\n\n        return new Promise((resolve) => {\n            Snap.animate(\n                0,\n                1,\n                (val) => {\n                    this.timerG.transform(\n                        `t ${(cx - timerGBBox.cx) * val} ${\n                            (cy - timerGBBox.cy) * val\n                        } s ${scale * val + 1}`\n                    );\n                },\n                duration,\n                null,\n                () => {\n                    animateRotation(resolve);\n                }\n            );\n        });\n    };\n\n    const startInterval = () => {\n        const textEl = this.timerG.select('.timer-text');\n        const secondTextEl = textEl.select('.number');\n\n        timerInterval = setInterval(() => {\n            if (seconds >= timeout) {\n                this.stop();\n                return;\n            }\n\n            seconds++;\n            secondTextEl.attr({ text: seconds });\n\n            if (timeout !== 999) {\n                const lengthPerTime = pathTotalLength / timeout;\n                Snap.animate(\n                    0,\n                    1,\n                    (val) => {\n                        progressPath.attr({\n                            strokeDashoffset:\n                                pathTotalLength -\n                                lengthPerTime * (seconds - 1) -\n                                lengthPerTime * val,\n                        });\n                    },\n                    1000,\n                    null,\n                    null\n                );\n            }\n        }, 1000);\n    };\n\n    this.timerG = canvas.g().addClass('timer');\n    this.endTime = 0;\n\n    this.destroy = () => {\n        isPlaying = false;\n        clearInterval(timerInterval);\n        this.timerG.remove();\n    };\n\n    this.reset = () => {\n        seconds = 0;\n        this.timerG.select('.number').attr({ text: seconds });\n        progressPath.attr({\n            strokeDashoffset: pathTotalLength,\n            strokeDasharray: pathTotalLength,\n        });\n    };\n\n    this.pause = () => {\n        // TODO: 문제를 다 푼 경우: 시간 state 설정\n        if (isPlaying) {\n            clearInterval(timerInterval);\n        } else {\n            startInterval();\n        }\n        isPlaying = !isPlaying;\n    };\n\n    this.stop = async () => {\n        isPlaying = false;\n        clearInterval(timerInterval);\n        dimmer.show();\n        beforeStopCb && beforeStopCb();\n        await animateTimeout();\n        afterStopCb && afterStopCb();\n    };\n\n    this.start = () => {\n        isPlaying = true;\n        startInterval();\n    };\n\n    this.init = () => {\n        const createElement = () => {\n            const backgroundG = this.timerG.g().addClass('timer-background');\n            const { image: bgImg } = background;\n            const imgBg = loadImage({\n                src: timerBg,\n                key: 'timerBG',\n                type: 'svg',\n            })\n                .use()\n                .attr({\n                    transform: `t ${bgImg.x} ${bgImg.y} s ${bgImg.scale}`,\n                });\n            backgroundG.append(imgBg);\n            const backgroundBBox = backgroundG.getBBox();\n\n            const timerTextG = this.timerG.g().addClass('timer-text');\n            timerTextG\n                .text(\n                    0 + numberAttrs.offset.x,\n                    0 + numberAttrs.offset.y,\n                    seconds.toString()\n                )\n                .addClass(`number ${numberAttrs.className}`)\n                .attr({\n                    fontSize: numberAttrs.fontSize,\n                    fill: numberAttrs.color,\n                    textAnchor: 'middle',\n                });\n            const textGBBox = timerTextG.getBBox();\n            timerTextG.transform(\n                `t ${backgroundBBox.cx} ${backgroundBBox.cy + textGBBox.h / 2}`\n            );\n\n            const progressG = this.timerG.g().addClass('timer-progress');\n            const progressPathStr = convertToPathStr.circle({\n                cx: backgroundBBox.cx + progress.offset.x,\n                cy: backgroundBBox.cy + progress.offset.y,\n                r: backgroundBBox.w / 2 - 7,\n            });\n            const { className: strokeClass, strokeWidth } = progress;\n\n            pathTotalLength = Snap.path.getTotalLength(progressPathStr);\n            progressPath = progressG.path(progressPathStr).attr({\n                class: `${strokeClass} fno`,\n                strokeDashoffset: timeout !== 999 ? pathTotalLength : 0,\n                strokeDasharray: pathTotalLength,\n                strokeWidth: strokeWidth,\n            });\n\n            dimmer = new Dimmer(this.timerG);\n        };\n\n        createElement();\n        this.start();\n    };\n\n    return this;\n}\n","module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"56\\\" height=\\\"62\\\" viewBox=\\\"0 0 56 62\\\"><g id=\\\"clock\\\" transform=\\\"translate(-720 -26)\\\"><path id=\\\"패스_4654\\\" data-name=\\\"패스 4654\\\" d=\\\"M45.771,6.891l2.764,2.167a.75.75,0,0,1,.127,1.053l-.76.97a1.184,1.184,0,0,1-.52.379l-.8.3-2.158,2.752a.885.885,0,0,1-1.242.151l-1.568-1.23a.885.885,0,0,1-.151-1.242l2.158-2.752.1-.851a1.174,1.174,0,0,1,.243-.594l.761-.971a.75.75,0,0,1,1.053-.127\\\" transform=\\\"translate(720 26)\\\" fill=\\\"#f6b90e\\\"></path><path id=\\\"패스_4655\\\" data-name=\\\"패스 4655\\\" d=\\\"M31.917,0h-8.7a1.4,1.4,0,0,0-1.4,1.4v1.69a1.4,1.4,0,0,0,1.4,1.4h1.723V7.64h5.259V4.484h1.723a1.4,1.4,0,0,0,1.4-1.4V1.4a1.4,1.4,0,0,0-1.4-1.4\\\" transform=\\\"translate(720 26)\\\" fill=\\\"#f6b90e\\\"></path><path id=\\\"패스_4656\\\" data-name=\\\"패스 4656\\\" d=\\\"M55.123,33.65A27.55,27.55,0,1,1,27.557,6.085,27.565,27.565,0,0,1,55.123,33.65\\\" transform=\\\"translate(720 26)\\\" fill=\\\"#22bfbf\\\"></path><path id=\\\"패스_4658\\\" data-name=\\\"패스 4658\\\" d=\\\"M51.568,33.66A24.111,24.111,0,0,1,19.845,56.521a24.87,24.87,0,0,1-4.89-2.26,24.435,24.435,0,0,1-2.671-1.9,24.092,24.092,0,0,1,15.19-42.8,24.145,24.145,0,0,1,18.7,8.917,22.253,22.253,0,0,1,1.89,2.671A23.935,23.935,0,0,1,51.568,33.66\\\" transform=\\\"translate(720 26)\\\" fill=\\\"#f1f1f1\\\"></path><path id=\\\"패스_4659\\\" data-name=\\\"패스 4659\\\" d=\\\"M46.171,18.47,12.284,52.357A24.058,24.058,0,0,1,4.6,41.276L35.09,10.8a23.928,23.928,0,0,1,11.081,7.67\\\" transform=\\\"translate(720 26)\\\" fill=\\\"#fff\\\"></path><path id=\\\"패스_4660\\\" data-name=\\\"패스 4660\\\" d=\\\"M50.335,26.031l-30.49,30.49a24.756,24.756,0,0,1-4.89-2.26l33.106-33.12a24.032,24.032,0,0,1,2.274,4.89\\\" transform=\\\"translate(720 26)\\\" fill=\\\"#fff\\\"></path><path id=\\\"패스_4661\\\" data-name=\\\"패스 4661\\\" d=\\\"M27.467,58.439A24.786,24.786,0,1,1,52.253,33.654,24.814,24.814,0,0,1,27.467,58.439m0-48.2A23.416,23.416,0,1,0,50.883,33.654,23.443,23.443,0,0,0,27.467,10.237\\\" transform=\\\"translate(720 26)\\\" fill=\\\"#1a1a1a\\\"></path><path id=\\\"패스_4663\\\" data-name=\\\"패스 4663\\\" d=\\\"M51.546,33.66A24.111,24.111,0,0,1,19.823,56.521a24.87,24.87,0,0,1-4.89-2.26,24.435,24.435,0,0,1-2.671-1.9,24.092,24.092,0,0,1,15.19-42.8,24.141,24.141,0,0,1,18.7,8.917,22.261,22.261,0,0,1,1.891,2.671A23.935,23.935,0,0,1,51.546,33.66\\\" transform=\\\"translate(720 26)\\\" fill=\\\"#f4eee4\\\"></path><path id=\\\"패스_4664\\\" data-name=\\\"패스 4664\\\" d=\\\"M27.445,58.439A24.786,24.786,0,1,1,52.231,33.654,24.814,24.814,0,0,1,27.445,58.439m0-48.2A23.416,23.416,0,1,0,50.861,33.654,23.443,23.443,0,0,0,27.445,10.237\\\" transform=\\\"translate(720 26)\\\" fill=\\\"#424242\\\"></path><path id=\\\"패스_4665\\\" data-name=\\\"패스 4665\\\" d=\\\"M46.171,18.47,12.284,52.357A24.058,24.058,0,0,1,4.6,41.276L35.09,10.8a23.928,23.928,0,0,1,11.081,7.67\\\" transform=\\\"translate(720 26)\\\" fill=\\\"#fff\\\" opacity=\\\"0.3\\\"></path><path id=\\\"패스_4666\\\" data-name=\\\"패스 4666\\\" d=\\\"M50.335,26.031l-30.49,30.49a24.756,24.756,0,0,1-4.89-2.26l33.106-33.12a24.032,24.032,0,0,1,2.274,4.89\\\" transform=\\\"translate(720 26)\\\" fill=\\\"#fff\\\" opacity=\\\"0.3\\\"></path><rect id=\\\"사각형_1228\\\" data-name=\\\"사각형 1228\\\" width=\\\"45.735\\\" height=\\\"45.722\\\" transform=\\\"translate(724.6 36.799)\\\" fill=\\\"none\\\"></rect><rect id=\\\"사각형_1241\\\" data-name=\\\"사각형 1241\\\" width=\\\"56\\\" height=\\\"62\\\" transform=\\\"translate(720 26)\\\" fill=\\\"none\\\"></rect></g></svg>\""],"sourceRoot":""}