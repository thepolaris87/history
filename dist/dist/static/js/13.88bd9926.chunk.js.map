{"version":3,"sources":["webpack:///./src/modules/DM000014.js","webpack:///./src/components/D1drag.js"],"names":["DM000014","generateQuiz","canvas","SOL","SVG","p","g","callback","generator","background","directive","questions","dropArea","dragItems","backgroundG","addClass","contentsG","timer","Timer","timeout","dropAreaG","dragAreaG","caseIdx","themeIdx","items","quizGenerator","answerNum","droppedCnt","handHint","createDirectiveText","textList","fontSize","ttsOffset","position","directiveG","directiveObj","D1directive","text","x","y","ttsOffet","alignGroup","createQuestion","offset","images","questionG","numbers","getRandomNumber","sum","getSumArray","forEach","num","i","numIdx","frontImg","image","img","url","front","rearImg","rear","frontImgBBox","getBBox","flipG","flip","back","duration","transform","w","wait","createDropArea","buttons","urls","scale","center","btn","select","pointerdown","selectOkBtn","createDragItems","bgImage","themeImages","min","itemLen","itemOffset","console","log","bgBBox","dragItemContainer","dragItemG","lineNum","Math","floor","h","dragItem","attr","pointerEvents","push","D1drag","startCallback","startDrag","moveCallback","moveDrag","endCallback","finishDrag","remove","dragItemBBox","dropAreaBBox","Snap","path","isBBoxIntersect","local","cx","cy","item","createHint","hintG","tx","ty","hint","type","XY","moveTo","pathStr","data","isCorrect","D1feedback","el","bool","controller","addUserAction","next","done","initialize","children","content","count","createBackground","init","draggingItem","opacity","originPoint","dragStart","element","dragMove","elemenet","dx","dy","origin","snapInvMatrix","diffMatrix","invert","dragEnd","setDragState","Number","animate","easing","_randomDuration","randomDuration","D1Animate","onPath","spectrumEffect","interval","_interval","setInterval","clone","after","val","undefined","clearInterval","moveAnimate","point","reset","moveAnimateWithScale","Promise","resolve","move","_scale","from","to","hidden","drag"],"mappings":"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","file":"static/js/13.88bd9926.chunk.js","sourcesContent":["import { alignGroup, SOL } from 'sol-common/util';\nimport { flip, hint, image } from 'sol-common';\nimport Snap from 'sol-common/snap';\nimport { getRandomNumber, wait, getSumArray } from '../utils/util';\nimport Timer from '../components/D1Timer';\nimport D1directive from '../components/D1directive';\nimport D1drag from '../components/D1drag';\nimport D1feedback from '../components/D1feedback';\n\nexport default function DM000014({ canvas = SOL.SVG, ...p }) {\n    const g = canvas;\n    const callback = p.callback;\n    const { generator, background, directive, questions, dropArea, dragItems } =\n        p;\n\n    const backgroundG = g.g().addClass('background');\n    const contentsG = g.g().addClass('contents');\n    const timer = new Timer(canvas, { timeout: 999 });\n    let dropAreaG = null;\n    let dragAreaG = null;\n\n    let caseIdx = 0; // 0: 같음, 1: 1 큰 수, 2: 1 작은 수\n    let themeIdx = 0;\n    let items = [];\n\n    let quizGenerator = null;\n    let answerNum = 0;\n    let droppedCnt = 0;\n    let handHint = null;\n\n    const createBackground = () => {\n        const { x, y, url, scale } = background.image;\n        image({\n            canvas: backgroundG,\n            x,\n            y,\n            img: { url, scale },\n            center: true,\n        });\n    };\n\n    const createDirectiveText = () => {\n        const { textList, fontSize, ttsOffset, position } = directive;\n        const directiveG = contentsG.g().addClass('directive');\n\n        const directiveObj = D1directive({\n            g: directiveG,\n            text: textList[caseIdx],\n            x: position.x,\n            y: position.y,\n            fontSize,\n            ttsOffet: ttsOffset,\n        });\n        alignGroup({ g: directiveObj.directive, y: position.y });\n    };\n\n    const createQuestion = () => {\n        const { position, offset, images } = questions;\n        const questionG = contentsG.g().addClass('question');\n        // const questionBg = questionG.g().addClass('question-bg'); // TODO: 배경 미사용 시 제거\n        const numbers = [getRandomNumber(0, 5), getRandomNumber(1, 4)];\n        const sum = getSumArray(numbers);\n\n        caseIdx === 1 && sum === 9 && (numbers[0] -= 1);\n        caseIdx === 2 && sum === 1 && (numbers[0] = getRandomNumber(1, 5));\n        answerNum = [0, 1, -1][caseIdx] + getSumArray(numbers);\n\n        numbers.forEach(async (num, i) => {\n            const numIdx = numbers[i] && numbers[i] - 1;\n            const frontImg = image({\n                canvas: questionG,\n                img: { url: images.front[numIdx] },\n            });\n            const rearImg = image({\n                canvas: questionG,\n                img: { url: images.rear[numIdx] },\n            });\n            const frontImgBBox = frontImg.getBBox(); // TODO: 이미지 사이즈 다른 경우 수정 - 되도록 동일하도록 디자인 요청\n\n            const flipG = flip({\n                canvas: questionG,\n                front: frontImg,\n                back: rearImg,\n                duration: 1000,\n            }).transform(\n                `t${position.x + frontImgBBox.w * i + offset.x * i} ${\n                    position.y + offset.y * i\n                }`\n            );\n\n            await wait();\n            await flipG.flip();\n        });\n    };\n\n    const createDropArea = () => {\n        const { background, buttons } = dropArea;\n        const { x, y, urls, scale } = background.image;\n        dropAreaG = contentsG.g().addClass('drop-area');\n\n        image({\n            canvas: dropAreaG,\n            x: x,\n            y: y,\n            img: { url: urls[themeIdx], scale },\n            center: true,\n        }).addClass('drop-area-bg');\n\n        // TODO: 디자인 반영\n        buttons.forEach((btn) => {\n            const { x, y, url, scale } = btn.image;\n            image({\n                canvas: dropAreaG,\n                x: x,\n                y: y,\n                img: { url: url, scale: scale },\n                center: true,\n            }).addClass('drop-area-ok');\n        });\n\n        // TODO: 중복 선택 방지\n        dropAreaG.select('.drop-area-ok').pointerdown(selectOkBtn);\n    };\n\n    const createDragItems = () => {\n        const { background, images } = dragItems;\n        const { image: bgImage } = background;\n        const themeImages = images[themeIdx];\n        const min = answerNum < 5 ? 5 : answerNum;\n        const itemLen = getRandomNumber(min, 9);\n        const itemWidth = 70;\n        const itemOffset = { x: 0, y: 0 };\n\n        dragAreaG = contentsG.g().addClass('drag-area');\n\n        console.log('itemLen, answerNum: ', itemLen, answerNum);\n\n        const bg = image({\n            canvas: dragAreaG,\n            x: bgImage.x,\n            y: bgImage.y,\n            img: { url: bgImage.urls[themeIdx], scale: bgImage.scale },\n            center: true,\n        }).addClass('drag-area-bg');\n        const bgBBox = bg.getBBox();\n\n        const dragItemContainer = dragAreaG.g().addClass('drag-item-container');\n\n        for (let i = 0; i < itemLen; i++) {\n            const dragItemG = dragItemContainer.g().addClass('drag-item-group');\n            const lineNum = Math.floor(i / 5) + 1;\n            const x = bgBBox.x + itemWidth * ((i % 5) + 1) + itemOffset.x;\n            const y = bgBBox.y + (bgBBox.h / 3) * lineNum + itemOffset.y;\n\n            // TODO: 구명이 난 느낌의 이미지 보여주기\n            // image({\n            //     canvas: dragItemG,\n            //     x,\n            //     y,\n            //     img: { url: themeImages[i], scale: 0.6 },\n            //     center: true,\n            // }).addClass('drag-item-blank');\n\n            const dragItem = image({\n                canvas: dragItemG,\n                x,\n                y,\n                img: { url: themeImages[i], scale: 0.6 },\n                center: true,\n            })\n                .attr({ pointerEvents: `${i && 'none'}` })\n                .addClass('drag-item');\n\n            // TODO: P02와 동일한 효과를 사용하는지 확인\n            // const draggingItem = image({\n            //     canvas: dragItemG,\n            //     x: bgBBox.x + itemWidth * ((i % 5) + 1) + itemOffset.x,\n            //     y: bgBBox.y + (bgBBox.h / 3) * lineNum + itemOffset.y,\n            //     img: { url: themeImages[i], scale: 1.3 },\n            //     center: true,\n            // })\n            //     .attr({ opacity: 0 })\n            //     .addClass('dragging-item');\n\n            items.push(\n                D1drag({\n                    dragItem,\n                    // draggingItem,\n                    startCallback: startDrag,\n                    moveCallback: moveDrag,\n                    endCallback: () => {\n                        finishDrag(dragItem);\n                    },\n                })\n            );\n        }\n    };\n\n    const startDrag = () => {\n        droppedCnt || handHint.remove();\n    };\n\n    const moveDrag = () => {};\n\n    const finishDrag = (dragItem) => {\n        const dragItemBBox = dragItem.getBBox();\n        const dropAreaBBox = dropAreaG.getBBox();\n        const isIntersect = Snap.path.isBBoxIntersect(\n            dragItemBBox,\n            dropAreaBBox\n        );\n        const itemOffset = { x: 0, y: 0 };\n\n        if (isIntersect) {\n            droppedCnt++;\n            dragItem.transform(\n                `${dragItem.transform().local} t${\n                    dropAreaBBox.x -\n                    dragItemBBox.cx +\n                    dragItemBBox.w * ((droppedCnt % 6) + 1) +\n                    itemOffset.x\n                } ${\n                    dropAreaBBox.y -\n                    dragItemBBox.cy +\n                    (dropAreaBBox.h / 3) * (Math.floor(droppedCnt / 6) + 1) +\n                    itemOffset.y\n                }`\n            );\n\n            droppedCnt === 1 &&\n                items.forEach((item) => item.attr({ pointerEvents: 'auto' }));\n            dragItem.attr({ pointerEvents: 'none' });\n        } else {\n            dragItem.transform('');\n            droppedCnt || createHint();\n        }\n    };\n\n    const createHint = () => {\n        const hintG =\n            contentsG.select('.hint') || contentsG.g().addClass('hint');\n        const { cx, cy } = items[0].getBBox();\n        const { cx: tx, cy: ty } = dropAreaG.getBBox();\n\n        handHint = hint({\n            canvas: hintG,\n            scale: 0.8,\n            type: 1,\n            XY: [cx, cy],\n            moveTo: [tx, ty],\n            pathStr: '',\n        }).data('count', 0);\n    };\n\n    const selectOkBtn = async () => {\n        const isCorrect = answerNum === droppedCnt;\n        if (isCorrect) {\n            // TODO: 숏피드백 위치\n            await D1feedback({\n                el: dropAreaG,\n                bool: isCorrect,\n                scale: 0.8,\n            });\n        } else {\n            // TODO: 오답도 숏피드백 필요 여부\n            console.log('incorrect!');\n            SOL.controller.addUserAction(false);\n        }\n        const nextGen = quizGenerator.next();\n        nextGen.done && callback(); // TODO: 종료 애니메이션\n    };\n\n    const initialize = (i) => {\n        caseIdx = getRandomNumber(0, 2);\n        themeIdx = getRandomNumber(0, 2);\n        items = [];\n        answerNum = 0;\n        droppedCnt = 0;\n        i && contentsG.children().forEach((content) => content.remove());\n    };\n\n    function* generateQuiz() {\n        for (let i = 0; i < generator.count; i++) {\n            initialize(i);\n            createDirectiveText();\n            createQuestion();\n            createDropArea();\n            createDragItems();\n            createHint();\n            yield;\n        }\n    }\n\n    const start = () => {\n        quizGenerator = generateQuiz();\n        createBackground();\n        quizGenerator.next();\n        timer.init();\n    };\n\n    start();\n}\n","import Snap from 'sol-common/snap';\nimport D1Animate from '../utils/D1Animate';\nimport { getRandomNumber } from '../utils/util';\n\nexport default function D1drag({ dragItem, draggingItem, startCallback, moveCallback, endCallback }) {\n    dragItem = dragItem.addClass('cp');\n    draggingItem && draggingItem.attr({ opacity: '0', pointerEvents: 'none' });\n\n    const originPoint = dragItem.getBBox();\n    const dragStart = element => element.data('originTransform', element.transform().local);\n    const dragMove = (elemenet, dx, dy) => {\n        const origin = elemenet.data('originTransform') || '';\n        const snapInvMatrix = elemenet.transform().diffMatrix.invert();\n        dx = snapInvMatrix.x(dx, dy);\n        dy = snapInvMatrix.y(dx, dy);\n        elemenet.transform(origin + 't' + [dx, dy]);\n    };\n    const dragEnd = element => element.data('originTransform', element.transform().local);\n\n    const start = () => {\n        dragStart(dragItem);\n        if (draggingItem) {\n            setDragState(false);\n            dragStart(draggingItem);\n        }\n        if (startCallback) startCallback();\n    };\n    const move = (dx, dy) => {\n        dragMove(dragItem, dx, dy);\n        if (draggingItem) {\n            setDragState(false);\n            dragMove(draggingItem, dx, dy);\n        }\n        if (moveCallback) moveCallback();\n    };\n    const end = () => {\n        dragEnd(dragItem);\n        if (draggingItem) {\n            setDragState(true);\n            dragEnd(draggingItem);\n        }\n        if (endCallback) endCallback();\n    };\n\n    const setDragState = bool => {\n        dragItem.attr({ opacity: Number(bool) });\n        draggingItem.attr({ opacity: Number(!bool) });\n    };\n\n    const animate = async ({ pathStr, easing, randomDuration: _randomDuration }) => {\n        const { local } = dragItem.transform();\n        dragItem.attr({ pointerEvents: 'none' });\n        const randomDuration = _randomDuration ? getRandomNumber(800, 1100) : 500;\n        if (draggingItem) {\n            D1Animate.onPath({ path: pathStr, duration: randomDuration, element: dragItem, local, easing });\n            await D1Animate.onPath({ path: pathStr, duration: randomDuration, element: draggingItem, local, easing });\n        } else {\n            await D1Animate.onPath({ path: pathStr, duration: randomDuration, element: dragItem, local, easing });\n        }\n        dragItem.attr({ pointerEvents: 'auto' });\n    };\n\n    dragItem.spectrumEffect = ({ interval: _interval = 100, duration = 750 }) => {\n        const interval = setInterval(() => {\n            const clone = dragItem.clone();\n            clone.after(dragItem);\n            Snap.animate(\n                1,\n                0,\n                val => clone.attr({ opacity: val }),\n                duration,\n                undefined,\n                () => clone.remove()\n            );\n        }, _interval);\n\n        const remove = () => clearInterval(interval);\n\n        return { remove };\n    };\n\n    dragItem.moveAnimate = async (point, easing, randomDuration) => {\n        const { x, y } = dragItem.getBBox();\n        const pathStr = 'M' + [x, y] + 'L' + [point.x, point.y];\n        await animate({ pathStr, easing, randomDuration });\n    };\n    dragItem.reset = async (dx = 0, dy = 0) => {\n        const { x, y } = dragItem.getBBox();\n        const pathStr = 'M' + [x, y] + 'L' + [originPoint.x + dx, originPoint.y + dy];\n        await animate({ pathStr });\n    };\n    dragItem.moveAnimateWithScale = ({ dx, dy, scale }) => {\n        const { local } = dragItem.transform();\n        return new Promise(resolve => {\n            Snap.animate(\n                0,\n                1,\n                val => {\n                    const move = 't' + [val * dx, val * dy];\n                    const _scale = 's' + (1 - ((scale.from - scale.to) / scale.from) * val);\n                    dragItem.transform(local + move + _scale);\n                },\n                750,\n                undefined,\n                resolve\n            );\n        });\n    };\n    dragItem.hidden = () => dragItem.attr({ opacity: '0', pointerEvents: 'none' });\n    dragItem.drag(move, start, end);\n\n    return dragItem;\n}\n"],"sourceRoot":""}