{"version":3,"sources":["webpack:///./src/utils/D1Record.js","webpack:///./src/modules/DM000006.js"],"names":["window","MediaRecorder","AudioRecorder","D1Record","userRecord","constraints","audio","navigator","mediaDevices","getUserMedia","stream","mediaRecorder","audioContext","AudioContext","webkitAudioContext","fileReader","FileReader","Audio","controls","source","document","createElement","appendChild","addEventListener","e","push","data","length","size","pop","blob","audioURL","URL","createObjectURL","src","load","readAsArrayBuffer","onloadend","arrayBuffer","result","decodeAudioData","audioBuffer","audioBufferToWav","channels","sampleRate","samples","bUrl","wavToMp3","a","body","innerHTML","href","download","aBuffer","btwIndex","btwSample","numOfChan","numberOfChannels","btwLength","btwArrBuff","ArrayBuffer","btwView","DataView","btwChnls","btwOffset","btwPos","setUint32","setUint16","getChannelData","Math","max","min","setInt16","wavHdr","lamejs","WavHeader","readHeader","wavSamples","Int16Array","dataOffset","dataLen","buffer","mp3enc","Mp3Encoder","remaining","i","mono","subarray","mp3buf","encodeBuffer","Int8Array","d","flush","mp3Blob","Blob","type","DM000005","canvas","SOL","SVG","g","startText","text","pauseText","playText","downloadText","trace","fillPath","strokePath","onComplete","console","log","strokeWidth","strokePathClassName","dragElScale","oneWay","click","start","stop","play"],"mappings":"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","file":"static/js/16.a721a173.chunk.js","sourcesContent":["import AudioRecorder from 'audio-recorder-polyfill';\nimport lamejs from 'lamejs';\n\nwindow.MediaRecorder ??= AudioRecorder;\n\nconst D1Record = async () => {\n    const userRecord = [];\n    const constraints = { audio: true };\n    const stream = await navigator.mediaDevices.getUserMedia(constraints);\n    const mediaRecorder = new MediaRecorder(stream);\n    const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    const fileReader = new FileReader();\n\n    const audio = new Audio();\n    audio.controls = true;\n    const source = document.createElement('source');\n    audio.appendChild(source);\n\n    mediaRecorder.addEventListener('dataavailable', e => userRecord.push(e.data));\n    mediaRecorder.addEventListener('stop', async () => {\n        const currentAudioData = userRecord[userRecord.length - 1];\n        if (currentAudioData.size === 0) userRecord.pop();\n        const blob = userRecord[userRecord.length - 1];\n\n        const audioURL = URL.createObjectURL(blob);\n        source.src = audioURL;\n        audio.load();\n\n        //Load blob\n        fileReader.readAsArrayBuffer(blob);\n\n        fileReader.onloadend = () => {\n            const arrayBuffer = fileReader.result; // as ArrayBuffer;\n            // Convert array buffer into audio buffer\n            audioContext.decodeAudioData(arrayBuffer, audioBuffer => {\n                // Do something with audioBuffer\n                const { channels, sampleRate, samples } = audioBufferToWav(audioBuffer);\n                const { bUrl } = wavToMp3(channels, sampleRate, samples);\n\n                var a = document.createElement('a');\n                document.body.appendChild(a);\n                a.innerHTML = 'fdskfjdslafjdslafjlsdflk';\n                a.href = bUrl;\n                a.download = 'test';\n            });\n        };\n    });\n\n    return { mediaRecorder, audio };\n};\n\nconst audioBufferToWav = aBuffer => {\n    let numOfChan = aBuffer.numberOfChannels,\n        btwLength = aBuffer.length * numOfChan * 2 + 44,\n        btwArrBuff = new ArrayBuffer(btwLength),\n        btwView = new DataView(btwArrBuff),\n        btwChnls = [],\n        btwIndex,\n        btwSample,\n        btwOffset = 0,\n        btwPos = 0;\n\n    setUint32(0x46464952); // \"RIFF\"\n    setUint32(btwLength - 8); // file length - 8\n    setUint32(0x45564157); // \"WAVE\"\n    setUint32(0x20746d66); // \"fmt \" chunk\n    setUint32(16); // length = 16\n    setUint16(1); // PCM (uncompressed)\n    setUint16(numOfChan);\n    setUint32(aBuffer.sampleRate);\n    setUint32(aBuffer.sampleRate * 2 * numOfChan); // avg. bytes/sec\n    setUint16(numOfChan * 2); // block-align\n    setUint16(16); // 16-bit\n    setUint32(0x61746164); // \"data\" - chunk\n    setUint32(btwLength - btwPos - 4); // chunk length\n\n    for (btwIndex = 0; btwIndex < aBuffer.numberOfChannels; btwIndex++) btwChnls.push(aBuffer.getChannelData(btwIndex));\n\n    while (btwPos < btwLength) {\n        for (btwIndex = 0; btwIndex < numOfChan; btwIndex++) {\n            // interleave btwChnls\n            btwSample = Math.max(-1, Math.min(1, btwChnls[btwIndex][btwOffset])); // clamp\n            btwSample = (0.5 + btwSample < 0 ? btwSample * 32768 : btwSample * 32767) | 0; // scale to 16-bit signed int\n            btwView.setInt16(btwPos, btwSample, true); // write 16-bit sample\n            btwPos += 2;\n        }\n        btwOffset++; // next source sample\n    }\n\n    const wavHdr = lamejs.WavHeader.readHeader(new DataView(btwArrBuff));\n    const wavSamples = new Int16Array(btwArrBuff, wavHdr.dataOffset, wavHdr.dataLen / 2);\n\n    return { channels: wavHdr.channels, sampleRate: wavHdr.sampleRate, samples: wavSamples };\n\n    function setUint16(data) {\n        btwView.setUint16(btwPos, data, true);\n        btwPos += 2;\n    }\n\n    function setUint32(data) {\n        btwView.setUint32(btwPos, data, true);\n        btwPos += 4;\n    }\n};\n\nconst wavToMp3 = (channels, sampleRate, samples) => {\n    const buffer = [];\n    const mp3enc = new lamejs.Mp3Encoder(channels, sampleRate, 128);\n    const samplesPerFrame = 1152;\n\n    let remaining = samples.length;\n\n    for (var i = 0; remaining >= samplesPerFrame; i += samplesPerFrame) {\n        var mono = samples.subarray(i, i + samplesPerFrame);\n        var mp3buf = mp3enc.encodeBuffer(mono);\n        if (mp3buf.length > 0) buffer.push(new Int8Array(mp3buf));\n        remaining -= samplesPerFrame;\n    }\n\n    const d = mp3enc.flush();\n    if (d.length > 0) buffer.push(new Int8Array(d));\n\n    const mp3Blob = new Blob(buffer, { type: 'audio/mp3' });\n    const bUrl = URL.createObjectURL(mp3Blob);\n\n    return { mp3Blob, bUrl };\n};\n\nexport default D1Record;\n","import trace from 'sol-common/components/trace';\nimport { SOL } from 'sol-common/util';\nimport D1Record from '../utils/D1Record';\n\nexport default async function DM000005({ canvas = SOL.SVG, ...p }) {\n    const g = canvas.g();\n\n    const { mediaRecorder, audio } = await D1Record();\n\n    const startText = g.text(200, 400, '녹음 시작');\n\n    const pauseText = g.text(400, 400, '중지');\n\n    const playText = g.text(600, 400, '재생');\n\n    const downloadText = g.text(700, 400, '다운로드');\n\n    const path = 'M400, 100 l100, 0';\n\n    // g.path(path).attr({ stroke: 'red' });\n\n      \n\n\n    trace({\n        canvas: g,\n        fillPath: 'M350, 50 l100, 0 l0, 100, l-100, 0 l0, -100z',\n        strokePath: path,\n        onComplete: () => {\n            console.log('fsdafas');\n        },\n        strokeWidth: 10,\n        strokePathClassName: 's02',\n        dragElScale: 0.11,\n        oneWay: true\n    });\n\n    startText.click(() => {\n        mediaRecorder.start();\n    });\n\n    pauseText.click(() => {\n        mediaRecorder.stop();\n    });\n\n    playText.click(() => {\n        audio.play();\n    });\n\n    downloadText.click(() => {\n        console.log(audio);\n    });\n}\n"],"sourceRoot":""}